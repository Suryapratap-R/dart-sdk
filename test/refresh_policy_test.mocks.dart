// Mocks generated by Mockito 5.0.17 from annotations
// in configcat_client/test/refresh_policy_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:configcat_client/src/config_fetcher.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDio_0 extends _i1.Fake implements _i2.Dio {}

class _FakeFetchResponse_1 extends _i1.Fake implements _i3.FetchResponse {}

/// A class which mocks [Fetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetcher extends _i1.Mock implements _i3.Fetcher {
  MockFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get client =>
      (super.noSuchMethod(Invocation.getter(#client), returnValue: _FakeDio_0())
          as _i2.Dio);
  @override
  _i4.Future<_i3.FetchResponse> fetchConfiguration() => (super.noSuchMethod(
          Invocation.method(#fetchConfiguration, []),
          returnValue: Future<_i3.FetchResponse>.value(_FakeFetchResponse_1()))
      as _i4.Future<_i3.FetchResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
